name: build & publish

on:
  workflow_dispatch:

#on:
#  push:
#    branches-ignore:
#      - 'l10n_master'
#  release:
#    types:
#      - published

jobs:
  cloc:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Set up cloc
        run: |
          sudo apt update
          sudo apt -y install cloc

      - name: Print lines of code
        run: cloc --include-lang TypeScript,JavaScript --vcs git

  build:
    name: Build CLI
    runs-on: windows-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Cache build
        id: cached-build
        uses: actions/cache@v2
        with:
          path: |
            ./build
          key: ${{ runner.os }}-${{ hashFiles('./build') }}

      - name: Setup Windows builder
        run: choco install checksum --no-progress

      - name: Set up Node
        uses: actions/setup-node@v1
        with:
          node-version: '10.x'

      - name: Download & Install RH
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri http://www.angusj.com/resourcehacker/resource_hacker.zip -OutFile "resource_hacker.zip"
          Expand-Archive -Path resource_hacker.zip -DestinationPath scripts/resource_hacker
          echo "D:\a\cli\cli\scripts\resource_hacker" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Set PACKAGE_VERSION & VER_INFO
        run: |
          $env:pkgVersion = (Get-Content -Raw -Path .\package.json | ConvertFrom-Json).version
          echo "PACKAGE_VERSION=$env:pkgVersion" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "version: $env:pkgVersion"

          if(Test-Path -Path $env:WIN_PKG) {
            echo "VER_INFO=true" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          }
        env:
          WIN_PKG: C:\Users\appveyor\.pkg-cache\v2.5\fetched-v10.4.1-win-x64

      - name: ResourceHacker
        shell: cmd
        run: |
          if defined VER_INFO ResourceHacker -open %WIN_PKG% -save %WIN_PKG% -action delete -mask ICONGROUP,1,
          if defined VER_INFO ResourceHacker -open version-info.rc -save version-info.res -action compile
          if defined VER_INFO ResourceHacker -open %WIN_PKG% -save %WIN_PKG% -action addoverwrite -resource version-info.res

      - name: Install
        run: npm install

      - name: Setup sub-module
        run: npm run sub:init

      - name: Build
        run: npm run build:prod


  package_and_publish:
    name: Package & Publish OS Executables
    runs-on: windows-latest
    needs: build
    strategy:
      matrix:
        include:
          - os: windows
            npm_os: win
            script: bw.exe
          - os: macos
            npm_os: mac
            script: bw
          - os: linux
            npm_os: lin
            script: bw
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Cache build
        id: cached-build
        uses: actions/cache@v2
        with:
          path: |
            ./build
          key: ${{ runner.os }}-${{ hashFiles('./build') }}

      - name: Debugging Cache
        run: |
          dir
          dir build

      - name: Package ${{ matrix.os }}
        run: npm run package:${{ matrix.npm_os }}

      - name: Zip
        shell: cmd
        run: |
          7z a ./dist/bw-${{ matrix.os }}-%PACKAGE_VERSION%.zip ./dist/${{ matrix.os }}/${{ matrix.script }}

      - name: Version Test
        if: ${{ matrix.os }} == "windows"
        run: |
          dir ./dist/
          Expand-Archive -Path "./dist/bw-windows-${env:PACKAGE_VERSION}.zip" -DestinationPath "./test/windows"
          $testVersion = Invoke-Expression '& ./test/windows/bw.exe -v'

          echo "version: $env:PACKAGE_VERSION"
          echo "testVersion: $testVersion"
          if($testVersion -ne $env:PACKAGE_VERSION) {
            Throw "Version test failed."
          }

      - name: Package & Create checksums
        run: |
          checksum -f="./dist/bw-${{ matrix.os }}-${env:PACKAGE_VERSION}.zip" `
            -t sha256 | Out-File -Encoding ASCII ./dist/bw-${{ matrix.os }}-sha256-${env:PACKAGE_VERSION}.txt

      - name: Publish ${{ matrix.os }} zip to GitHub
        uses: actions/upload-artifact@v2
        with:
          name: bw-${{ matrix.os }}-${{ env.PACKAGE_VERSION }}.zip
          path: ./dist/bw-${{ matrix.os }}-${{ env.PACKAGE_VERSION }}.zip

      - name: Publish ${{ matrix.os}} checksum to GitHub
        uses: actions/upload-artifact@v2
        with:
          name: bw-${{ matrix.os }}-sha256-${{ env.PACKAGE_VERSION }}.txt
          path: ./dist/bw-${{ matrix.os}}-sha256-${{ env.PACKAGE_VERSION }}.txt


  # If this only depends on things that have been uploaded, then this can be separate. 
  # Requires reverse engineering the choco scripts
  pnp_choco:
    name: Package & Publish Choco
    runs-on: windows-latest
    needs: package_and_publish
    if: github.event_name == 'release'
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Cache build
        id: cached-build
        uses: actions/cache@v2
        with:
          path: |
            ./build
          key: ${{ runner.os }}-${{ hashFiles('./build') }}

      - name: Setup Chocolatey
        run: choco apikey --key $env:CHOCO_API_KEY --source https://push.chocolatey.org/
        env:
          CHOCO_API_KEY: ${{ secrets.CHOCO_API_KEY }}

      - name: Package Chocolatey
        run: .\scripts\choco-pack.ps1

      - name: Publish Chocolatey CLI to GitHub
        uses: actions/upload-artifact@v2
        with: 
          name: bitwarden-cli.${{ env.PACKAGE_VERSION }}.nupkg
          path: ./dist/chocolatey/bitwarden-cli.${{ env.PACKAGE_VERSION }}.nupkg

      - name: Publish to Chocolately 
        run: |
          .\scripts\choco-update.ps1 -version $env:PACKAGE_VERSION


  # This process depends on the builds. However, if it is only dependent on the 
  # build artifacts, then this can be kept here separately. If not, idk yet how
  # to combine windows + ubuntu worker file systems
  pnp_snap:
    name: Publish Snap
    runs-on: ubuntu-latest
    needs: package_and_publish
    if: github.event_name == 'release'
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Cache build
        id: cached-build
        uses: actions/cache@v2
        with:
          path: |
            ./build
          key: ${{ runner.os }}-${{ hashFiles('./build') }}

      - name: Install Snapcraft
        uses: samuelmeuli/action-snapcraft@v1
        with: 
          snapcraft_token: ${{ secrets.SNAP_TOKEN }}

      - name: Print environment
        run: |
          whoami
          snapcraft --version
          echo "GitHub ref: $GITHUB_REF"
          echo "GitHub event: $GITHUB_EVENT"
        env:
          GITHUB_REF: ${{ github.ref }}
          GITHUB_EVENT: ${{ github.event_name }}

      - name: Install Snap
        shell: pwsh
        run: |
          ./scripts/snap-build.ps1 -version $env:PACKAGE_VERSION
          snap install ./dist/snap/bw*.snap --dangerous

      - name: Test Snap
        shell: pwsh
        run: |
          $testVersion = Invoke-Expression '& bw -v'
          if($testVersion -ne $env:PACKAGE_VERSION) {
            Throw "Version test failed."
          }

      - name: Cleanup Test & Update Snap for Publish
        shell: pwsh
        run: |
          snap remove bw
          ./scripts/snap-update.ps1

      - name: Publish
        shell: pwsh
        run: |
          echo "<stub for publishing snap to github release>"
          echo "./dist/snap/bw_${PACKAGE_VERSION}_amd64.snap"

      - name: Snap Logout
        run: snapcraft logout


  # This job is independent: it reruns 'npm run build:prod'
  pnp_npm:
    name: Publish NPM
    runs-on: ubuntu-latest
    needs: package_and_publish
    if: github.event_name == 'release'
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Cache build
        id: cached-build
        uses: actions/cache@v2
        with:
          path: |
            ./build
          key: ${{ runner.os }}-${{ hashFiles('./build') }}

      - name: Setup NPM
        shell: pwsh
        run: |
          "//registry.npmjs.org/:_authToken=${env:NPM_TOKEN}" | Out-File ".npmrc" -Encoding UTF8
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish NPM
        run: npm run publish:npm
