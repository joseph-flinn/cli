name: build & publish

on:
  push:
    branches-ignore:
      - 'l10n_master'
  release:
    types:
      - published

jobs:
  cloc:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Set up cloc
        run: |
          sudo apt update
          sudo apt -y install cloc

      - name: Print lines of code
        run: cloc --include-lang TypeScript,JavaScript,HTML,Sass,CSS --vcs git


  setup:
    name: Setup Package Version
    runs-on: windows-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Set PACKAGE_VERSION
        run: |
          $env:pkgVersion = (Get-Content -Raw -Path .\package.json | ConvertFrom-Json).version
          echo "PACKAGE_VERSION=$env:pkgVersion" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "version: $env:pkgVersion"

      - name: test setting env var
        run: |
          echo "version: $env:PACKAGE_VERSION"
          
          if($env:PACKAGE_VERSION -eq "") {
            Throw "test env failed."
          }


  build:
    name: Build CLI
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - pkg-target: win-x64
            artifact-os: windows
            exe: bw.exe
            npm-os: win
          - pkg-target: macos-x64
            artifact-os: macos
            exe: bw
            npm-os: mac
          - pkg-target: linux-x64
            artifact-os: linux
            exe: bw
            npm-os: lin
    steps:
      - name: Setup Windows builder
        run: choco install checksum --no-progress

      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Set up Node
        uses: actions/setup-node@v1
        with:
          node-version: '10.x'

      - name: Cache Build
        uses: actions/cache@v2
        with:
          path: ./build
          key: build-cache-${{ github.sha }}

      - name: Cache Node Modules
        uses: actions/cache@v2
        with:
          path: ./node-modules
          key: node-modules-cache-${{ github.sha }}

      - name: Cache Dist
        uses: actions/cache@v2
        with:
          path: ./dist
          key: ${{ runner.os }}-dist-cache-${{ github.sha }}

      - name: Install
        run: npm install

      - name: Setup sub-module
        run: npm run sub:init

      - name: Build
        run: npm run build:prod

      - name: Clean Build
        run: npm run clean

      - name: Package ${{ matrix.os }}
        run: |
          npm run publish:${{ matrix.npm-os }}
          7z a ./dist/bw-${{ matrix.artifact-os }}-${{ env.PACKAGE_VERSION }}.zip ./dist/${{ matrix.artifact-os }}/${{ matrix.exe }}
          checksum -f="./dist/bw-${{ matrix.artifact-os }}-${{ env.PACKAGE_VERSION }}.zip" `
            -t sha256 | Out-File -Encoding ASCII ./dist/bw-${{ matrix.artifact-os }}-sha256-${{ env.PACKAGE_VERSION }}.txt


  package-nuget:
    runs-on: windows-latest
    needs: build
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Set up Node
        uses: actions/setup-node@v1
        with:
          node-version: '10.x'

      - name: Cache Dist
        uses: actions/cache@v2
        with:
          path: ./dist
          key: dist-cache-${{ github.sha }}

      - name: debug dist cache
        run: dir ./dist
          
      - name: Package NuGet
        run: .\scripts\choco-pack.ps1


  # What is this testing for?
  version-test:
    name: Version Test Windows Exe
    runs-on: windows-latest
    needs: build
    steps:
      - name: Cache Dist
        uses: actions/cache@v2
        with:
          path: ./dist
          key: dist-cache-${{ github.sha }}

      - name: Version Test
        run: |
          Expand-Archive -Path "./dist/bw-windows-$env:PACKAGE_VERSION.zip" -DestinationPath "./test/windows"
          dir './test/windows'
          $testVersion = Invoke-Expression '& .\test\windows\bw.exe -v'
          if($testVersion -ne $env:PACKAGE_VERSION) {
            Throw "Version test failed."
          }

  publish-zips-github:
    name: Publish zips to GitHub
    runs-on: windows-latest
    strategy:
      matrix:
        artifact-os: ['windows', 'macos', 'linux']
    needs: version-test
    steps:
      - name: Set up Node
        uses: actions/setup-node@v1
        with:
          node-version: '10.x'

      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Cache Dist
        uses: actions/cache@v2
        with:
          path: ./dist
          key: dist-cache-${{ github.sha }}

      - name: Publish ${{ matrix.artifact-os }} zip
        uses: actions/upload-artifact@v2
        with:
          name: bw-${{ matrix.artifact-os }}-${{ env.PACKAGE_VERSION }}.zip
          path: ./dist/bw-${{ matrix.artifact-os }}-${{ env.PACKAGE_VERSION }}.zip

      - name: Publish ${{ matrix.artifact-os }} checksum to GitHub
        uses: actions/upload-artifact@v2
        with:
          name: bw-${{ matrix.artifact-os }}-sha256-${{ env.PACKAGE_VERSION }}.txt
          path: ./dist/bw-${{ matrix.artifact-os }}-sha256-${{ env.PACKAGE_VERSION }}.txt


  publish-nuget-github:
    name: Publish Nuget to GitHub
    runs-on: windows-latest
    needs: [ package-nuget, version-test ]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Cache Dist
        uses: actions/cache@v2
        with:
          path: ./dist
          key: dist-cache-${{ github.sha }}

      - name: Publish Chocolatey CLI
        uses: actions/upload-artifact@v2
        with: 
          name: bitwarden-cli.${env:PACKAGE_VERSION}.nupkg
          path: ./dist/chocolatey/bitwarden-cli.${env:PACKAGE_VERSION}.nupkg


  publish-windows:
    name: Publish Windows
    runs-on: windows-latest
    needs: build
    if: github.event_name == 'release'
    steps:
      - name: Setup Chocolatey
        run: choco apikey --key $env:CHOCO_API_KEY --source https://push.chocolatey.org/
        env:
          CHOCO_API_KEY: ${{ secrets.CHOCO_API_KEY }}

      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Publish
        run: |
          .\scripts\choco-update.ps1 -version $env:PACKAGE_VERSION


  # This process seems independent from the others
  publish-snap:
    name: Publish Snap
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'
    steps:
      - name: Set up Node
        uses: actions/setup-node@v1
        with:
          node-version: '10.x'

      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Install Snapcraft
        uses: samuelmeuli/action-snapcraft@v1
        with: 
          snapcraft_token: ${{ secrets.SNAP_TOKEN }}

      - name: Print environment
        run: |
          whoami
          snapcraft --version
          echo "GitHub ref: $GITHUB_REF"
          echo "GitHub event: $GITHUB_EVENT"
        env:
          GITHUB_REF: ${{ github.ref }}
          GITHUB_EVENT: ${{ github.event_name }}

      - name: Install Snap
        shell: pwsh
        run: |
          ./scripts/snap-build.ps1 -version $env:PACKAGE_VERSION
          snap install ./dist/snap/bw*.snap --dangerous

      - name: Test Snap
        shell: pwsh
        run: |
          $testVersion = Invoke-Expression '& bw -v'
          if($testVersion -ne $env:PACKAGE_VERSION) {
            Throw "Version test failed."
          }

      - name: Cleanup Test & Update Snap for Publish
        shell: pwsh
        run: |
          snap remove bw
          ./scripts/snap-update.ps1

      - name: Publish
        shell: pwsh
        run: |
          echo "<stub for publishing snap to github release>"
          echo "./dist/snap/bw_${PACKAGE_VERSION}_amd64.snap"

      - name: Snap Logout
        run: snapcraft logout


  # This job is independent: it reruns 'npm run build:prod'
  publish_npm:
    name: Publish NPM
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'
    steps:
      - name: Set up Node
        uses: actions/setup-node@v1
        with:
          node-version: '10.x'

      - name: Setup NPM
        shell: pwsh
        run: |
          "//registry.npmjs.org/:_authToken=${env:NPM_TOKEN}" | Out-File ".npmrc" -Encoding UTF8
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Cache Build
        uses: actions/cache@v2
        with:
          path: ./build
          key: build-cache-${{ github.sha }}

      - name: Publish NPM
        run: npm publish --access public
